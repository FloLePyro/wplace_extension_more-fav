// ==UserScript==
// @name         Favoris Perso - UI Am√©lior√©e üí´
// @namespace    http://tampermonkey.net/
// @version      3.0
// @description  Favoris avec dossiers, import/export et une belle interface ‚ú®
// @author       Toi
// @match        https://wplace.live/*
// @grant        GM_setValue
// @grant        GM_getValue
// ==/UserScript==

(function() {
  'use strict';

  window.addEventListener('load', () => {
    console.log("[Favoris Perso] Charg√© ‚úÖ");

    // === Donn√©es ===
    let data = GM_getValue('favoris_perso', { dossiers: [{ nom: 'Favoris', liens: [] }] });
    let dossierActif = 0;

    // === Position des √©l√©ments ===
    const posBtn = GM_getValue('pos_bouton', { x: 20, y: 20 });
    const posListe = GM_getValue('pos_liste', { x: 20, y: 70 });

    // === Bouton principal ===
    const btn = document.createElement('div');
    btn.innerHTML = '‚≠ê';
    Object.assign(btn.style, {
      position: 'fixed',
      bottom: `${posBtn.y}px`,
      right: `${posBtn.x}px`,
      background: 'linear-gradient(135deg, #FFD700, #FFC107)',
      width: '52px',
      height: '52px',
      borderRadius: '50%',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      fontSize: '22px',
      cursor: 'grab',
      boxShadow: '0 6px 15px rgba(0,0,0,0.3)',
      zIndex: '999999',
      transition: 'transform 0.2s, box-shadow 0.2s',
      userSelect: 'none'
    });
    btn.addEventListener('mouseenter', () => btn.style.transform = 'scale(1.1)');
    btn.addEventListener('mouseleave', () => btn.style.transform = 'scale(1)');
    document.body.appendChild(btn);

    // === Fen√™tre principale ===
    const panel = document.createElement('div');
    Object.assign(panel.style, {
      position: 'fixed',
      bottom: `${posListe.y}px`,
      right: `${posListe.x}px`,
      width: '330px',
      maxHeight: '420px',
      overflow: 'hidden',
      background: 'rgba(255,255,255,0.97)',
      borderRadius: '16px',
      boxShadow: '0 8px 25px rgba(0,0,0,0.25)',
      fontFamily: 'Segoe UI, sans-serif',
      fontSize: '13px',
      display: 'flex',
      flexDirection: 'column',
      zIndex: '999999'
    });
    document.body.appendChild(panel);

    // === En-t√™te ===
    const header = document.createElement('div');
    Object.assign(header.style, {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between',
      padding: '10px 14px',
      background: 'linear-gradient(135deg, #007BFF, #0056d2)',
      color: 'white',
      fontWeight: 'bold',
      borderTopLeftRadius: '16px',
      borderTopRightRadius: '16px',
      cursor: 'grab'
    });
    header.innerHTML = `<span>‚≠ê Mes Favoris</span>`;

    // Boutons en haut √† droite
    const headerBtns = document.createElement('div');
    headerBtns.style.display = 'flex';
    headerBtns.style.gap = '6px';
    const btnTuto = makeMiniBtn('üìñTuto', '#17a2b8', 'Afficher le tuto');
    const btnExport = makeMiniBtn('üíæExporter', '#28a745', 'Exporter');
    const btnImport = makeMiniBtn('üì•Importer', '#6f42c1', 'Importer');
    headerBtns.append(btnTuto, btnExport, btnImport);
    header.appendChild(headerBtns);

    // === Conteneur de dossiers ===
    const dossierBar = document.createElement('div');
    Object.assign(dossierBar.style, {
      display: 'flex',
      flexWrap: 'wrap',
      gap: '6px',
      padding: '8px 12px',
      borderBottom: '1px solid #ddd'
    });

    // === Liste des favoris ===
    const content = document.createElement('div');
    Object.assign(content.style, {
      flexGrow: 1,
      overflowY: 'auto',
      padding: '10px 14px'
    });

    // === Ajout manuel ===
    const inputContainer = document.createElement('div');
    Object.assign(inputContainer.style, {
      display: 'flex',
      gap: '6px',
      padding: '8px 12px',
      borderTop: '1px solid #ddd',
      background: '#fafafa'
    });
    const inputUrl = document.createElement('input');
    Object.assign(inputUrl, {
      type: 'text',
      placeholder: 'Entrer une URL ou un lien...'
    });
    Object.assign(inputUrl.style, {
      flexGrow: 1,
      border: '1px solid #ccc',
      borderRadius: '8px',
      padding: '6px 8px'
    });
    const addBtn = makeMiniBtn('‚ûï', '#007BFF', 'Ajouter ce lien');
    inputContainer.append(inputUrl, addBtn);

    // === Assemble tout ===
    panel.append(header, dossierBar, content, inputContainer);

    // === G√©n√©ration de la barre de dossiers ===
    function majDossierBar() {
      dossierBar.innerHTML = '';
      data.dossiers.forEach((dossier, i) => {
        const tab = document.createElement('div');
        tab.textContent = dossier.nom;
        Object.assign(tab.style, {
          background: i === dossierActif ? '#007BFF' : '#eee',
          color: i === dossierActif ? 'white' : '#333',
          padding: '4px 10px',
          borderRadius: '12px',
          cursor: 'pointer',
          display: 'flex',
          alignItems: 'center',
          gap: '4px'
        });
        tab.addEventListener('click', () => {
          dossierActif = i;
          majDossierBar();
          majListeFavoris();
        });

        // bouton suppression dossier
        if (data.dossiers.length > 1) {
          const del = document.createElement('span');
          del.textContent = 'üóëÔ∏è';
          del.style.cursor = 'pointer';
          del.style.fontSize = '12px';
          del.addEventListener('click', e => {
            e.stopPropagation();
            if (confirm(`Supprimer le dossier "${dossier.nom}" ?`)) {
              data.dossiers.splice(i, 1);
              dossierActif = Math.max(0, dossierActif - 1);
              GM_setValue('favoris_perso', data);
              majDossierBar();
              majListeFavoris();
            }
          });
          tab.appendChild(del);
        }
        dossierBar.appendChild(tab);
      });

      const addDossier = makeMiniBtn('üìÅ+', '#28a745', 'Nouveau dossier');
      addDossier.addEventListener('click', () => {
        const nom = prompt('Nom du dossier ?');
        if (!nom) return;
        data.dossiers.push({ nom, liens: [] });
        dossierActif = data.dossiers.length - 1;
        GM_setValue('favoris_perso', data);
        majDossierBar();
        majListeFavoris();
      });
      dossierBar.appendChild(addDossier);
    }

    // === Liste des favoris ===
    function majListeFavoris() {
      const dossier = data.dossiers[dossierActif];
      content.innerHTML = '';
      if (dossier.liens.length === 0) {
        const vide = document.createElement('div');
        vide.innerHTML = '<i>Aucun favori</i>';
        vide.style.opacity = '0.6';
        content.appendChild(vide);
          return;
      }
      dossier.liens.forEach((fav, i) => {
        const card = document.createElement('div');
        Object.assign(card.style, {
          background: '#fff',
          borderRadius: '10px',
          padding: '8px 10px',
          marginBottom: '6px',
          boxShadow: '0 2px 6px rgba(0,0,0,0.1)',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center'
        });
        const link = document.createElement('a');
        link.href = fav.url;
        link.innerText = fav.nom;
        link.target = '_blank';
        link.style.color = '#007BFF';
        link.style.textDecoration = 'none';
        link.style.flexGrow = '1';
        const del = document.createElement('span');
        del.textContent = '‚ùå';
        del.style.cursor = 'pointer';
        del.addEventListener('click', e => {
          e.preventDefault();
          dossier.liens.splice(i, 1);
          GM_setValue('favoris_perso', data);
          majListeFavoris();
        });
        card.append(link, del);
        content.appendChild(card);
      });
    }

    majDossierBar();
    majListeFavoris();

    // === Ajouter manuellement ===
    addBtn.addEventListener('click', () => {
      const url = inputUrl.value.trim();
      if (!url) return alert('Entrez une URL valide.');
      const nom = prompt('Nom du favori ?', url);
      if (!nom) return;
      const dossier = data.dossiers[dossierActif];
      dossier.liens.push({ url, nom });
      GM_setValue('favoris_perso', data);
      inputUrl.value = '';
      majListeFavoris();
    });

    // === Exporter / Importer ===
    btnExport.addEventListener('click', () => {
      const blob = new Blob([JSON.stringify(data)], { type: 'application/json' });
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = 'favoris_wplace.json';
      a.click();
    });

    btnImport.addEventListener('click', () => {
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = '.json';
      input.onchange = e => {
        const file = e.target.files[0];
        const reader = new FileReader();
        reader.onload = evt => {
          try {
            data = JSON.parse(evt.target.result);
            GM_setValue('favoris_perso', data);
            dossierActif = 0;
            majDossierBar();
            majListeFavoris();
            alert('Import r√©ussi ‚úÖ');
          } catch {
            alert('Fichier invalide ‚ùå');
          }
        };
        reader.readAsText(file);
      };
      input.click();
    });

    // === Tuto ===
    const tuto = document.createElement('div');
    Object.assign(tuto.style, {
      position: 'fixed',
      top: '60px',
      right: '60px',
      width: '320px',
      maxHeight: '400px',
      overflowY: 'auto',
      background: 'rgba(255,255,255,0.97)',
      borderRadius: '12px',
      boxShadow: '0 4px 20px rgba(0,0,0,0.25)',
      padding: '14px',
      fontSize: '13px',
      display: 'none',
      zIndex: '999999'
    });
    tuto.innerHTML = `
      <h3>üìñ Tutoriel</h3>
      <ul>
        <li>‚≠ê <b>Favori+</b> : ajoute la position actuelle.</li>
        <li>‚ûï Entrer une URL pour ajouter manuellement.</li>
        <li>üìÅ G√©rer vos dossiers depuis la barre du haut.</li>
        <li>üíæ Exporter ou üì• importer vos favoris.</li>
        <li>üóëÔ∏è Supprimer un dossier ou un lien facilement.</li>
        <li>üñ±Ô∏è Vous pouvez d√©placer la fen√™tre et le bouton.</li>
      </ul>
    `;
    document.body.appendChild(tuto);
    btnTuto.addEventListener('click', () => {
      tuto.style.display = tuto.style.display === 'none' ? 'block' : 'none';
    });

    // === Fonctions utilitaires ===
    function makeMiniBtn(text, color, title) {
      const b = document.createElement('div');
      b.textContent = text;
      b.title = title;
      Object.assign(b.style, {
        background: color,
        color: 'white',
        borderRadius: '8px',
        padding: '4px 8px',
        cursor: 'pointer',
        fontSize: '13px',
        textAlign: 'center',
        transition: 'background 0.2s'
      });
      b.addEventListener('mouseenter', () => b.style.filter = 'brightness(1.15)');
      b.addEventListener('mouseleave', () => b.style.filter = 'brightness(1)');
      return b;
    }

    // === Drag & drop fiable ===
    enableDrag(btn, 'pos_bouton', () => {
      const url = window.location.href;
      const nom = prompt('Nom du favori ?', document.title || 'Nom');
      if (!nom) return;
      data.dossiers[dossierActif].liens.push({ url, nom });
      GM_setValue('favoris_perso', data);
      majListeFavoris();
      alert(`‚úÖ Favori "${nom}" ajout√© !`);
    });
    enableDrag(panel, 'pos_liste');

    function enableDrag(el, key, clickAction) {
      let drag = false, sx, sy, r, b, t = 0;
      el.addEventListener('mousedown', e => {
        if (e.target.tagName === 'INPUT' || e.target.tagName === 'A') return;
        drag = true;
        sx = e.clientX; sy = e.clientY;
        r = parseFloat(el.style.right); b = parseFloat(el.style.bottom);
        document.body.style.userSelect = 'none';
        t = Date.now();
      });
      document.addEventListener('mousemove', e => {
        if (!drag) return;
        el.style.right = `${r - (e.clientX - sx)}px`;
        el.style.bottom = `${b - (e.clientY - sy)}px`;
      });
      document.addEventListener('mouseup', () => {
        if (drag) {
          drag = false;
          document.body.style.userSelect = '';
          GM_setValue(key, { x: parseFloat(el.style.right), y: parseFloat(el.style.bottom) });
          if (Date.now() - t < 150 && clickAction) clickAction();
        }
      });
    }
  });
})();
*
